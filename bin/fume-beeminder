#!/usr/bin/env ruby

# Simple script to get old fume data and send it to beeminder. Adjust data. Put
# it in a daily cron job. Pay for dreeves' hookers.

debug = false
send  = true

require "set"

begin
  require 'fume'
rescue LoadError
  if File.symlink? __FILE__
    require File.dirname(File.readlink(__FILE__)) + '/../lib/fume'
  else
    require File.dirname(__FILE__) + '/../lib/fume'
  end
end

# get all days we haven't reported yet
bee_log = File.join(Fume::Config["fume_dir"], Fume::Config["beeminder"])
yaml = YAML::load(File.open(bee_log))
fmt = "%Y-%m-%d"

puts "getting unreported entries..." if debug
Fumetrap::CLI.args = Getopt::Declare.new("#{Fumetrap::CLI::USAGE}")
Fumetrap::CLI.parse "all -s #{yaml["start"]} -e '1 hour ago'"
unreps = Fumetrap::CLI.unreported_entries
puts "found: #{unreps.count}" if debug

if unreps.count.zero?
  puts "nothing to do..." if debug
  exit
end

# load fume data
puts "loading fume data..." if debug
fume = Fume::CLI.new
fume.load_file
fume.fumes.update_quotas(fume.fumes.filter_since yaml["start"].strftime(fmt))
contexts = Set.new(fume.fumes.contexts.map(&:name))

# report each entry
done = []
body = ""
unreps.each do |entry|
  # check if it's in a valid context
  next if not contexts.include? entry.sheet

  # build data point
  date = entry.start
  score = "%0.2f" % (entry.duration / (60.0*60.0))
  text  = "fume update, context: #{entry.sheet}"
  body << "#{date.strftime("%Y %m %d")} #{score} \"#{text}\"\n"

  # mark it as done later
  done << entry
end

# send data
if not send
  puts "would send:"
  puts body
else
  require 'net/http'
  
  base = "http://beta.beeminder.com"
  cmd  = "create_all"
  api  = "#{base}/#{yaml["account"]}/goals/#{yaml["goal"]}/datapoints/#{cmd}"

  puts "using api: #{api}" if debug

  begin # connect
    url = URI.parse(api)
    http = Net::HTTP.new(url.host, url.port)
    http.read_timeout = 8640
    http.start do |http|
      req = Net::HTTP::Post.new(url.path)
      req.set_form_data({"datapoints_text" => body,
                          "origin" => yaml["account"]})
      res = http.request(req)
    end
  rescue StandardError, Timeout::Error
    put "connection failed..."
    put res
    exit 1
  end
end

# save data
puts "saving..." if debug
done.each do |entry|
  entry.reported!
  entry.save if send
end
